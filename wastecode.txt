
   
    django.contrib.adminclass HomeAdminConfig(AdminConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    default_site = 'Home.admin.MyAdminSite'
  {% include "admin/app_list.html" with app_list=app_list show_changelinks=True %}
  class HustlerAdminConfig(AdminConfig):
   
    default_site = 'Home.admin.MyAdminSite'
 class HomeConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'Home'


    class HustlerAdminConfig(AdminConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    default_site = 'Home.admin.MyAdminSite'
 {% block sidebar %}
<div id="content-related">
    <div class="module" id="recent-actions-module">
        <h2>{% translate 'Recent actions' %}</h2>
        <h3>{% translate 'My actions' %}</h3>
        {% load log %}
        {% get_admin_log 10 as admin_log for_user user %}
        {% if not admin_log %}
        <p>{% translate 'None available' %}</p>
        {% else %}
        <ul class="actionlist">
            {% for entry in admin_log %}
            <li
                class="{% if entry.is_addition %}addlink{% endif %}{% if entry.is_change %}changelink{% endif %}{% if entry.is_deletion %}deletelink{% endif %}">
                {% if entry.is_deletion or not entry.get_admin_url %}
                {{ entry.object_repr }}
                {% else %}
                <a href="{{ entry.get_admin_url }}">{{ entry.object_repr }}</a>
                {% endif %}
                <br>
                {% if entry.content_type %}
                <span class="mini quiet">{% filter capfirst %}{{ entry.content_type.name }}{% endfilter %}</span>
                {% else %}
                <span class="mini quiet">{% translate 'Unknown content' %}</span>
                {% endif %}
            </li>
            {% endfor %}
        </ul>
        {% endif %}
    </div>
</div>
{% endblock %}



lass MyAdminSite(admin.ModelAdmin):
      
    def get_urls(self) :
        urls = super().get_urls()
        my_urls = [
            path('weather/', self.weather_view),
            ]
        return my_urls + urls

    def weather_view(self,request):
        url = "https://community-open-weather-map.p.rapidapi.com/weather"
        querystring = {"q":"nairobi","lat":"0","lon":"0","callback":"test","id":"2172797","lang":"null","units":"imperial","mode":"xml"}
        headers = {
	            "X-RapidAPI-Host": "community-open-weather-map.p.rapidapi.com"}
        response = requests.request("GET", url, headers=headers, params=querystring)
        
        context = dict(
            self.admin_site.each_context(request),
            response = response,
            )
        return TemplateResponse(request,'admin/index.html',context)


admin.site.register(Weather,MyAdminSite)

def get_urls(self) :
        urls = super(MyAdminSite).get_urls()
        my_urls = [
            path('weather/', self.weather_view),
            ]
        return my_urls + urls
    